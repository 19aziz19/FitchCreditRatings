#
###################################/World Bank Governance Indicators
###################################Percentile rank % world gdp & log % share gdp/
#
df_WorldGDP <- df_WorldGDP %>%
mutate(Year = year(as.Date(Year, "%d/%m/%Y"))) %>%
group_by(Year) %>%
mutate(WorldGDPRank = percent_rank(GDPWorld)) %>%
mutate(WorldGDPLog =  log(GDPWorld * 100)) %>%
select(-GDPWorld) %>%
ungroup()
#
###################################/Percentile rank % world gdp & log % share gdp
###################################Defaults/
#
#since 1965. Gather into long format
#
df_Default <- df_Default %>%
gather(Occasion,Default,2:14) %>%
select(-Occasion) %>%
filter(!is.na(Default)) %>%
arrange(Country,Default)
###################################/Defaults
###################################gross general government debt/
df_GovDebt <- df_GovDebt %>%
mutate(Year = year(as.Date(Year, "%d/%m/%Y")))
df_GovDebt <-  df_GovDebt %>%
select(Country, Year, GC.DOD.TOTL.GD.ZS) %>%
filter(!is.na(GC.DOD.TOTL.GD.ZS)) %>%
arrange(Country,Year)   %>%
group_by(Country) %>%
mutate(RollMeanGovDebt =
(lag(GC.DOD.TOTL.GD.ZS)+lag(GC.DOD.TOTL.GD.ZS,2)+ GC.DOD.TOTL.GD.ZS) /3) %>%        mutate(RollMeanGovDebt = ifelse(is.na(RollMeanGovDebt), GC.DOD.TOTL.GD.ZS, RollMeanGovDebt)) %>%
#  select(-GC.DOD.TOTL.GD.ZS) %>%
ungroup()
###################################/gross general government debt
###################################general government (budget) balance (% of GDP)/
#AKA General Government Deficit
#
df_GenGovDeficit <- TidyUpWorldBank(df_GenGovDeficit)
df_GenGovDeficit <- df_GenGovDeficit %>%
filter(!is.na(GC.BAL.CASH.GD.ZS)) %>%
arrange(Country,Year)   %>%
group_by(Country) %>%
mutate(RollGenGovDeficit =
(lag(GC.BAL.CASH.GD.ZS)+lag(GC.BAL.CASH.GD.ZS,2)+ GC.BAL.CASH.GD.ZS) /3) %>%
mutate(RollGenGovDeficit = ifelse(is.na(RollGenGovDeficit), GC.BAL.CASH.GD.ZS, RollGenGovDeficit)) %>%
select(-GC.BAL.CASH.GD.ZS) %>%
ungroup()
###################################/general government (budget) balance (% of GDP)
#Three-year centred average of public foreign currency denominated (and indexed) debt (% of #general government debt).  ---DATA NOT AVAILABLE :(
##################################Interest Payments on Revenue/
df_InterestPaymentsRevenue <- TidyUpWorldBank(df_InterestPaymentsRevenue)
df_InterestPaymentsRevenue <- df_InterestPaymentsRevenue %>%
filter(!is.na(GC.XPN.INTP.RV.ZS)) %>%
arrange(Country,Year)   %>%
group_by(Country) %>%
mutate(RollInterestPaymentsRevenue =
(lag(GC.XPN.INTP.RV.ZS)+lag(GC.XPN.INTP.RV.ZS,2)+ GC.XPN.INTP.RV.ZS) /3) %>%
mutate(RollInterestPaymentsRevenue = ifelse(is.na(RollInterestPaymentsRevenue), GC.XPN.INTP.RV.ZS, RollInterestPaymentsRevenue)) %>%
select(-GC.XPN.INTP.RV.ZS) %>%
ungroup()
###################################/Interest Payments on Revenue
###################################NonManufacturedMerchandiseExports/
df_MerchandiseExports <- TidyUpWorldBank(df_MerchandiseExports)
df_ManufacturesExports <- TidyUpWorldBank(df_ManufacturesExports)
#df_CXR3 <- df_WDI %>%
#  select(Country, Year, BX.GSR.GNFS.CD)  %>%
#  filter(!is.na(BX.GSR.GNFS.CD))
df_CXR2 <- read_csv("CurrentAccountReceipts.csv")
df_CXR2 <- TidyUpWorldBank(df_CXR2)
df_CXR2 <- df_CXR2 %>%
select(Country, Year, BX.GSR.FCTY.CD)  %>%
filter(!is.na(BX.GSR.FCTY.CD))
df_CXR <- df_CXR2
df_NonManMercExports <- df_MerchandiseExports %>% left_join(df_ManufacturesExports) %>%
mutate(NonManMercExports = (1-TX.VAL.MANF.ZS.UN/100) * TX.VAL.MRCH.CD.WT) %>%
select(-TX.VAL.MRCH.CD.WT, -TX.VAL.MANF.ZS.UN) %>%
left_join(df_CXR) %>%
filter(!is.na(NonManMercExports)  & !is.na(BX.GSR.FCTY.CD) ) %>%
mutate(NonManMercExports = NonManMercExports / BX.GSR.FCTY.CD) %>%
select(-BX.GSR.FCTY.CD) %>%
arrange(Year)
###################################/NonManufacturedExports
###################################TotalReserves/
df_TotalReservesMonths <- TidyUpWorldBank(df_TotalReservesMonths)
###################################/TotalReserves
###################################NetForeignAssets/
df_NetForeignAssets <- TidyUpWorldBank(df_NetForeignAssets)
df_GDPLCU <- TidyUpWorldBank(df_GDPLCU)
df_NetForeignAssets <- df_GDPLCU %>%
right_join(df_NetForeignAssets) %>%
filter(!is.na(NY.GDP.MKTP.KN) & !is.na(FM.AST.NFRG.CN) ) %>%
mutate(NetForeignAssetsGDP = FM.AST.NFRG.CN / NY.GDP.MKTP.KN) %>%
select(-NY.GDP.MKTP.KN, -FM.AST.NFRG.CN) %>%
arrange(Country,Year)   %>%
group_by(Country) %>%
mutate(RollNetForeignAssetsGDP =
(lag(NetForeignAssetsGDP)+lag(NetForeignAssetsGDP,2)+ NetForeignAssetsGDP) /3) %>%
mutate(RollNetForeignAssetsGDP = ifelse(is.na(RollNetForeignAssetsGDP), NetForeignAssetsGDP, RollNetForeignAssetsGDP)) %>%
select(-NetForeignAssetsGDP) %>%
ungroup()
###################################/NetForeignAssets
###################################Current Account Balance and FDI over GDP/
df_CurrentAccountBalance <- TidyUpWorldBank(df_CurrentAccountBalance)
df_CurrentAccountBalance <- df_WDI %>%
select(Country, Year, BX.KLT.DINV.CD.WD ) %>%
right_join(df_CurrentAccountBalance) %>%
right_join(select(df_WDI, Country, Year, NY.GDP.MKTP.CD)) %>%
filter(!is.na(BN.CAB.XOKA.CD) & !is.na(BX.KLT.DINV.CD.WD) & !is.na(NY.GDP.MKTP.CD)) %>%
mutate(CABFDI = (BX.KLT.DINV.CD.WD + BN.CAB.XOKA.CD )/NY.GDP.MKTP.CD) %>%
select(-NY.GDP.MKTP.CD, -BN.CAB.XOKA.CD, -BX.KLT.DINV.CD.WD) %>%
arrange(Country, Year) %>%
group_by(Country) %>%
mutate(RollCABFDI =
(lag(CABFDI)+lag(CABFDI,2)+ CABFDI) /3) %>%
mutate(RollCABFDI = ifelse(is.na(RollCABFDI), CABFDI, RollCABFDI)) %>%
select(-CABFDI) %>%
ungroup()
#####################################/Current Account Balance and FDI over GDP
#####################################Interest Payments/
df_InterestPayments <- TidyUpWorldBank(df_InterestPayments)
df_InterestPayments <- df_InterestPayments %>%
left_join(df_CXR) %>%
mutate(InterestPayments = DT.INT.DECT.CD / BX.GSR.FCTY.CD) %>%
select(-DT.INT.DECT.CD, -BX.GSR.FCTY.CD) %>%
arrange(Country, Year) %>%
filter(!is.na(InterestPayments)) %>%
group_by(Country) %>%
mutate(RollInterestPayments =
(lag(InterestPayments)+lag(InterestPayments,2)+ InterestPayments) /3) %>%
mutate(RollInterestPayments = ifelse(is.na(RollInterestPayments ), InterestPayments, RollInterestPayments )) %>%
select(-InterestPayments) %>%
ungroup()
#####################################/Interest Payments
#####################################Real GDP Growth/
df_GrowthGDP <- df_GrowthGDP %>%
mutate(Year = year(as.Date(Year, "%d/%m/%Y")))
#####################################/Real GDP Growth
#####################################Real Interest Rates/
df_RealInterestRate <- df_RealInterestRate %>%
mutate(Year = year(as.Date(Year, "%d/%m/%Y")))
#####################################/Real Interest Rates
#STD DEV REAL GDP
#####################################CPI/
#v_CPI <- as.character(seq(1990, 2012, 1))
#df_CPI <- bind_cols(df_CPI[,1:4],df_CPI[,v_CPI])
#df_CPI <- df_CPI %>%
#  filter(`Indicator Code` == "PCPI_PC_CP_A_PT")
#df_CPI <- TidyUpWorldBank(df_CPI)
df_CPI <- df_CPI %>%
mutate(Year = year(as.Date(Year, "%d/%m/%Y")))
df_CPI <- df_CPI %>% arrange(Country,Year)   %>%
arrange(Country,Year) %>%
group_by(Country) %>%
mutate(ChangeCPI = CPI - lag(CPI) ) %>%
mutate(ChangeCPI = ifelse(is.na(CPI), 0, CPI)) %>%
mutate(RollMeanChangeCPI =
(lag(ChangeCPI)+lag(ChangeCPI,2) + ChangeCPI) /3) %>%
mutate(RollMeanChangeCPI = ifelse(is.na(RollMeanChangeCPI), ChangeCPI, RollMeanChangeCPI)) %>%
select(-CPI, -ChangeCPI) %>%
ungroup()
#####################################/CPI
#Time to join explanatory variables
df_Fitch <- df_Fitch %>%
mutate(Year = year(as.Date(Date, "%d/%m/%Y")))
df_Fitch <- df_Fitch %>%
left_join(df_GovDebt)
df_Fitch <- df_Fitch %>%
left_join(df_Governance)
df_Fitch <- df_Fitch %>%
left_join(df_BroadMoney)
df_Fitch <- df_Fitch %>%
left_join(df_GenGovDeficit)
df_Fitch <- df_Fitch %>%
left_join(df_InterestPayments)
df_Fitch <- df_Fitch %>%
left_join(df_CPI)
df_Fitch <- df_Fitch %>%
left_join(df_WorldGDP)
#df_Fitch <- df_Fitch %>%
#  left_join(df_GovDeptRoll)
df_Fitch <- df_Fitch %>%
left_join(df_NonManMercExports)
df_Fitch <- df_Fitch %>%
left_join(df_NetForeignAssets)
df_Fitch <- df_Fitch %>%
left_join(df_CurrentAccountBalance)
df_Fitch <- df_Fitch %>%
left_join(df_TotalReservesMonths)
df_Fitch <- df_Fitch %>%
left_join(df_InterestPaymentsRevenue)
df_Fitch <- df_Fitch %>%
left_join(df_GrowthGDP)
df_Fitch <- df_Fitch %>%
left_join(df_RealInterestRate)
df_Fitch$SDGDP <- NA
for (counter in 1:dim(df_Fitch)[1]){
i = as.integer(df_Fitch[counter, "Year"])
j = as.character(df_Fitch[counter, "Country"])
df_Fitch[counter, "SDGDP"] <- CalculateRollingSD(df_GrowthGDP, i, j)
}
df_Fitch$Default <- NA
for (counter in 1:dim(df_Fitch)[1]){
i = as.integer(df_Fitch[counter, "Year"])
j = as.character(df_Fitch[counter, "Country"])
df_Fitch[counter, "Default"] <- WhenDidYouDefault(df_Default, i, j)
}
df_Fitch <- df_Fitch %>%
mutate(Defaulted = ifelse(Default > 0, 1, 0))
df_Fitch <- df_Fitch %>%
mutate(ReserveCurrrency = 0) %>%
mutate(ReserveCurrrency = ifelse(Country %in% v_ReserveCurrency3, 3,
ifelse(Country %in% v_ReserveCurrency3_Post1999 & Year > 1999, 3,
ifelse(Country %in% v_ReserveCurrency2, 2,
ifelse(Country %in% v_ReserveCurrency1, 1, 0) ))))
df_Fitch <- df_Fitch %>%
rename(ReservesMonthsImports = FI.RES.TOTL.MO, GovDeptGDP = GC.DOD.TOTL.GD.ZS)
df_Fitch_Summary <- summary(df_Fitch)
#Too many blanks
df_Fitch <- df_Fitch %>%
select(-RollInterestPayments)
df_Fitch <- df_Fitch %>%
mutate(locallongterm_letter = gsub("\\+","",locallongterm)) %>%
mutate(locallongterm_letter = gsub("-","",locallongterm_letter))
write_csv(df_Fitch, "df_Fitch.csv")
####Remove non rated entries and defaults
df_Fitch <- df_Fitch %>%
filter(locallongterm != "-" & locallongterm != "i" & locallongterm != "withdrawn" & locallongterm != "RD" & locallongterm != "DDD")
####REMOVE MISSINGNESS#######
df_FitchReduced <- df_Fitch %>%
na.omit()
df_FitchReduced_Summary <- summary(df_FitchReduced)
#strFitchReduced <- str(df_FitchReduced)
# Chunk 4
df_Fitch %>% group_by(Country) %>% summarise(n())
# Chunk 5
df_Fitch_Summary
# Chunk 6
df_FitchReduced_Summary
# Chunk 7
CreditRatings <- c("AAA",
"AA+", "AA",
"A+","A","A-",
"BBB+","BBB","BBB-",
"BB+","BB","BB-",
"B+","B","B-",
"CCC+","CCC","CCC-",
"CC","C","DDD",
"RD") #withdrawn i  -
CreditRatingsLetter <- c("AAA",
"AA",
"A",
"BBB",
"BB",
"B",
"CCC",
"CC","C","DDD",
"RD")
gg_Credit <- df_Fitch %>%
ggplot( aes(x = locallongterm)) +
geom_bar(col="red",
fill="green",
alpha = .2) +
labs(title="Sovereign Credit Ratings") +
labs(x="Rating", y="Count") +
scale_x_discrete(limits=CreditRatings) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gg_CreditLetter <- df_Fitch %>%
ggplot( aes(x = locallongterm_letter)) +
geom_bar(col="red",
fill="green",
alpha = .2) +
labs(title="Sovereign Credit Ratings") +
labs(x="Rating", y="Count") +
scale_x_discrete(limits=CreditRatingsLetter) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gg_CreditReduced <- df_FitchReduced %>%
ggplot( aes(x = locallongterm)) +
geom_bar(col="red",
fill="green",
alpha = .2) +
labs(title="Sovereign Credit Ratings - Removed Missingness") +
labs(x="Rating", y="Count") +
scale_x_discrete(limits=CreditRatings) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gg_CreditLetterReduced <- df_FitchReduced %>%
ggplot( aes(x = locallongterm_letter)) +
geom_bar(col="red",
fill="green",
alpha = .2) +
labs(title="Sovereign Credit Ratings - Removed Missingness") +
labs(x="Rating", y="Count") +
scale_x_discrete(limits=CreditRatingsLetter) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
###Create Country Map with Average Credit Rating
z <- df_Fitch %>%
select(Country, locallongterm ) %>%
mutate(Credit = EncodeRating(locallongterm)) %>%
left_join(df_CountyCodes)
map_z <- z %>%
group_by(`Country Code`) %>%
summarize('Average Credit Rating'=mean(Credit)) %>%
joinCountryData2Map( joinCode = "ISO3" ,nameJoinColumn = "Country Code")
###Create Country Map with Average Junk Status
z <- z %>%
mutate(Junk = EncodeJunkBonds(locallongterm))
map_zj <- z %>%
group_by(`Country Code`) %>%
summarize('Junk Bond Status'=mean(Junk)) %>%
joinCountryData2Map( joinCode = "ISO3" ,nameJoinColumn = "Country Code")
# Chunk 8
gg_Credit
# Chunk 9
gg_CreditLetter
# Chunk 10
gg_CreditReduced
gg_CreditLetterReduced
# Chunk 11
cat("Proportion Table of Full Dataset by Rating")
prop.table(table(df_Fitch$locallongterm))
cat("Proportion Table of Full Dataset by Grade")
prop.table(table(df_Fitch$locallongterm_letter))
cat("Proportion Table of Dataset Minus Missingness by Rating")
prop.table(table(df_FitchReduced$locallongterm))
cat("Proportion Table of Dataset Minus Missingness by Grade")
prop.table(table(df_FitchReduced$locallongterm_letter))
# Chunk 12
mapParams <- mapCountryData(map_z ,nameColumnToPlot='Average Credit Rating', addLegend=FALSE )
do.call( addMapLegend, c(mapParams, legendWidth=0.5, legendMar = 2))
mapParamsj <- mapCountryData(map_zj ,nameColumnToPlot='Junk Bond Status', addLegend=FALSE )
do.call( addMapLegend, c(mapParamsj, legendWidth=0.5, legendMar = 2))
# Chunk 13
y <- EncodeRating(df_FitchReduced[,6])
X <- as.matrix(df_FitchReduced[,9:27])
#Scale and Centre
maxs <- apply(X, 2, max)
mins <- apply(X, 2, min)
X <- scale(X, center = mins, scale = maxs - mins)
summary(X)
melted_X <- melt(cor(X))
gg_cor <- ggplot(data = melted_X, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradient(aes(fill = value), low = "white",high = "steelblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
pca <- prcomp(X, center=FALSE, scale=FALSE)
summary(pca)$importance[,1:16]
#Code shamelessly stolen from class
v_Rating = df_FitchReduced$locallongterm
tmp <- data.frame(pca$rotation, name = colnames(X))
gg_PCA1PCA2 <- tmp %>%  ggplot(aes(PC1, PC2)) + geom_point() +
geom_text_repel(aes(PC1, PC2, label=name),
data = filter(tmp,
PC1 < -0.1 | PC1 >0.1 | PC2 < -0.15 | PC2>0.0))
# Chunk 14
gg_cor
# Chunk 15
gg_PCA1PCA2
# Chunk 16
set.seed(28070)
df_model <- cbind(as.data.frame(y),as.data.frame(X))
df_model_train <- df_model %>% sample_frac(0.8, replace = FALSE)
df_model_test <- df_model %>% anti_join(df_model_train)
model.lm <- lm(locallongterm ~ ., data = df_model_train)
summary(model.lm)
yhat_lm_train <- predict(model.lm)
yhat_lm_test <- predict(model.lm, newdata = df_model_test)
#RMSE(df_model_train[,1],yhat_lm_train)
RMSE_lm <- RMSE(df_model_test[,1],yhat_lm_test)
#kNN
for (i in 1:7) {
set.seed(9892)
yhat_knn_test <- as.integer(knn3Train(df_model_train[,2:18], df_model_test[2:18],      as.factor(df_model_train[,1]), k = i, l = 0, prob = FALSE, use.all = TRUE))
cat("k = ", i, ": ",RMSE(df_model_test[,1],yhat_knn_test), "\n")
}
set.seed(9892)
yhat_knn_test <- as.integer(knn3Train(df_model_train[,2:18], df_model_test[2:18],      as.factor(df_model_train[,1]), k = 1, l = 0, prob = FALSE, use.all = TRUE))
RMSE_knn <- RMSE(df_model_test[,1],yhat_knn_test)
#Gradient Boosted Tree XGBoost
xgtrain <- data.matrix(df_model_train[,-1])
xgval <- data.matrix(df_model_test[,-1])
y.xgb <- df_model_train[,1]
set.seed(6301)
model.xgb <- xgboost(data = xgtrain,
label = y.xgb ,
eta = 0.2,
max_depth = 1,
nround=2000,
subsample = 0.8,
colsample_bytree = 0.8,
eval_metric = "rmse",
objective = "reg:linear",
nthread = 6,
early_stopping_rounds=1,
verbose = 0
)
yhat_xgb_test <- predict(model.xgb, xgval)
RMSE_xgb <- RMSE(yhat_xgb_test ,df_model_test[,1])
#Export data for analysis
model <- xgb.dump(model.xgb, with.stats = TRUE)
#model[1:10]
names <- dimnames(data.matrix(X[,]))[[2]]
importance_matrix <- xgb.importance(names, model = model.xgb)
#Ensemble
y_e <- round((yhat_xgb_test + yhat_lm_test + yhat_knn_test)/3)
df_Ensemble  <- c(1,1,1,signif(RMSE(y_e,df_model_test[,1]),2))
y_e <- round((yhat_xgb_test*2 + yhat_lm_test + yhat_knn_test)/4)
df_Ensemble <- rbind(df_Ensemble, c(2,1,1, signif(RMSE(y_e,df_model_test[,1]),3)))
y_e <- round((yhat_xgb_test*3 + yhat_lm_test + yhat_knn_test)/5)
df_Ensemble <- rbind(df_Ensemble, c(3,1,1, signif(RMSE(y_e,df_model_test[,1]),3)))
y_e <- round((yhat_xgb_test*4 + yhat_lm_test + yhat_knn_test)/6)
df_Ensemble <- rbind(df_Ensemble, c(4,1,1, signif(RMSE(y_e,df_model_test[,1]),3)))
y_e <- round((yhat_xgb_test*3 + yhat_lm_test*2 + yhat_knn_test*1)/6)
df_Ensemble <- rbind(df_Ensemble, c(3,2,1, signif(RMSE(y_e,df_model_test[,1]),3)))
colnames(df_Ensemble) <- c("Prop XGB", "Prop Reg", "Prop kNN", "  RMSE  ")
df_Ensemble
# Chunk 17
xgb.plot.importance(importance_matrix[1:10,])
# Chunk 18
df_FitchGovernance <- df_WGI %>% select(CC.PER.RNK, GE.PER.RNK,  RL.PER.RNK, VA.PER.RNK, PV.PER.RNK, RQ.PER.RNK, Year, Country) %>%
right_join(df_FitchReduced) %>%
mutate(y = EncodeRating(locallongterm)) %>%
select(-Governance, -locallongterm_letter, -Country, -Date, -foreignlongterm, -foreignshortterm,   -foreignoutlookWatch, -locallongterm, -localoutlookWatch, -Year)
#df_FitchGovernance<-df_FitchGovernance[,9:dim(df_FitchGovernance)[2]]
model_lm_governance <- lm(y ~ ., data = df_FitchGovernance)
Junk = 9.5
labs <- c("ControlOfCorruption", "GovernmentEffectiveness", "RuleOfLaw",  "VoiceAndAccountability","PoliticalStabilityAbsenceViolence","RegulatoryQuality")
Investment <- as.numeric(df_FitchGovernance %>% filter(y < Junk) %>%
select(CC.PER.RNK, GE.PER.RNK,  RL.PER.RNK, VA.PER.RNK, PV.PER.RNK, RQ.PER.RNK) %>%
na.omit() %>%
summarize(ControlOfCorruption = mean(CC.PER.RNK),
GovernmentEffectiveness = mean(GE.PER.RNK),
RuleOfLaw = mean(RL.PER.RNK), VoiceAndAccountability = mean(VA.PER.RNK),
PoliticalStabilityAbsenceViolence = mean(PV.PER.RNK),
RegulatoryQuality=mean(RQ.PER.RNK) ) )
Junk <- as.numeric(df_FitchGovernance %>% filter(y > Junk) %>%
select(CC.PER.RNK, GE.PER.RNK,  RL.PER.RNK, VA.PER.RNK, PV.PER.RNK, RQ.PER.RNK) %>%
na.omit() %>%
summarize(ControlOfCorruption = mean(CC.PER.RNK),
GovernmentEffectiveness = mean(GE.PER.RNK),
RuleOfLaw = mean(RL.PER.RNK), VoiceAndAccountability = mean(VA.PER.RNK),
PoliticalStabilityAbsenceViolence = mean(PV.PER.RNK),
RegulatoryQuality=mean(RQ.PER.RNK) ) )
Prime <- as.numeric(df_FitchGovernance %>% filter(y == 1) %>%
select(CC.PER.RNK, GE.PER.RNK,  RL.PER.RNK, VA.PER.RNK, PV.PER.RNK, RQ.PER.RNK) %>%
na.omit() %>%
summarize(ControlOfCorruption = mean(CC.PER.RNK),
GovernmentEffectiveness = mean(GE.PER.RNK),
RuleOfLaw = mean(RL.PER.RNK), VoiceAndAccountability = mean(VA.PER.RNK),
PoliticalStabilityAbsenceViolence = mean(PV.PER.RNK),
RegulatoryQuality=mean(RQ.PER.RNK) ) )
scores = list( "Junk" = Junk, "Investment" = Investment, "Prime" = Prime)
# Chunk 19
summary(model_lm_governance)
# Chunk 20
chartJSRadar(scores, labs)
# Chunk 21: setup
knitr::opts_chunk$set(echo = TRUE)
res_lm_train <- residuals(model.lm)
gg_fitres <- cbind(yhat_lm_train,res_lm_train) %>%
ggplot(linreg.dat, aes(x = yhat_lm_test, y = res_lm_train)) +
geom_point(shape = 18) +
geom_smooth(fill = "mediumorchid4", colour="yellow2", method = "lm", fullrange=T, size=0.5) + xlab("Fitted Values") + ylab("Residuals") +
ggtitle("Fitted Values vs. Residuals: Linearity") +
theme(panel.background = element_rect(fill = 'lightsteelblue', colour = 'white'))
gg_fitres <- cbind(yhat_lm_train,res_lm_train) %>%
ggplot(aes(x = yhat_lm_test, y = res_lm_train)) +
geom_point(shape = 18) +
geom_smooth(fill = "mediumorchid4", colour="yellow2", method = "lm", fullrange=T, size=0.5) + xlab("Fitted Values") + ylab("Residuals") +
ggtitle("Fitted Values vs. Residuals: Linearity") +
theme(panel.background = element_rect(fill = 'lightsteelblue', colour = 'white'))
cbind(yhat_lm_train,res_lm_train)
gg_fitres <- cbind(yhat_lm_train,res_lm_train) %>%
as.data.frame() %>%
ggplot(aes(x = yhat_lm_test, y = res_lm_train)) +
geom_point(shape = 18) +
geom_smooth(fill = "mediumorchid4", colour="yellow2", method = "lm", fullrange=T, size=0.5) + xlab("Fitted Values") + ylab("Residuals") +
ggtitle("Fitted Values vs. Residuals: Linearity") +
theme(panel.background = element_rect(fill = 'lightsteelblue', colour = 'white'))
gg_fitres
cbind(yhat_lm_train,res_lm_train) %>%
as.data.frame()
gg_fitres <- cbind(yhat_lm_train,res_lm_train) %>%
as.data.frame() %>%
ggplot(aes(x = yhat_lm_test, y = res_lm_train)) +
geom_point(shape = 18)
gg_fitres
plot(model.lm)
df_lm_analysis <- as.data.frame(yhat_lm_train,res_lm_train)
df_lm_analysis <- data.frame(yhat_lm_train, res_lm_train)
colnames(df_lm_analysis) <- c("fitted", "resids")
df_lm_analysis %>%
ggplot(aes(x = fitted, y = resids)) +
geom_point(shape = 18) +
geom_smooth(fill = "mediumorchid4", colour="yellow2", method = "lm", fullrange=T, size=0.5) + xlab("Fitted Values") + ylab("Residuals") +
ggtitle("Fitted Values vs. Residuals: Linearity") +
theme(panel.background = element_rect(fill = 'lightsteelblue', colour = 'white'))
gg_fitres <- df_lm_analysis %>%
ggplot(aes(x = fitted, y = resids)) +
geom_point(shape = 18) +
geom_smooth(fill = "mediumorchid4", colour="yellow2", method = "lm", fullrange=T, size=0.5) + xlab("Fitted Values") + ylab("Residuals") +
ggtitle("Fitted Values vs. Residuals: Linearity") +
theme(panel.background = element_rect(fill = 'lightsteelblue', colour = 'white'))
gg_fitres <- df_lm_analysis %>%
ggplot(aes(x = fitted, y = resids)) +
geom_point(shape = 18) +
geom_smooth(fill = "mediumorchid4", colour="yellow2", method = "lm", fullrange=T, size=0.5) + xlab("Fitted Values") + ylab("Residuals") +
ggtitle("Fitted Values vs. Residuals") +
theme(panel.background = element_rect(fill = 'lightsteelblue', colour = 'white'))
gg_fitres
gg_fitres
df_Ensemble[1,]
